#!/bin/bash -l

#.Declare a name for this job, preferably with 16 or fewer characters.
#SBATCH -J gkyl-wham
#SBATCH -A m2116

#.Request the queue (enter the possible names, if omitted, default is the default)
#.this job is going to use the default
#SBATCH -q regular

#.Number of nodes to request (Perlmutter has 64 cores and 4 GPUs per node)
#SBATCH -N 1
#SBATCH --ntasks 64

#.Specify GPU needs:
#SBATCH --constraint gpu
#SBATCH --gpus 4


#.Request wall time
#SBATCH -t 06:00:00

num_gpu=4

#.Load modules (this must match those in the machines/configure script).
module load PrgEnv-gnu/8.5.0
module load craype-accel-nvidia80
module load cray-mpich/8.1.28
module load cudatoolkit/12.0
module load nccl/2.18.3-cu12

#.Disable CUDA-ware MPI, since it causes problems on Perlmutter and we use NCCL alone.
export MPICH_GPU_SUPPORT_ENABLED=0

#.On Perlmutter some jobs get warnings about DVS_MAXNODES (used in file stripping).
#.We set it to 24 for now, but really this depends on the amount/size of I/O being performed.
#.See online NERSC docs and the intro_mpi man page.
export DVS_MAXNODES=24_
export MPICH_MPIIO_DVS_MAXNODES=24

#.Run the rt_gk_sheath_2x2v_p1 executable using 1 GPU along x (-c 1) and 8
#.GPUs along the field line (-d 8). See './rt_gk_sheath_2x2v_p1 -h' for
#.more details/options on decomposition. It also assumes the executable is
#.in the present directory. If it isn't, change `./` to point to the
#.directory containing the executable.

max_number=0
file_prefix="gk_wham-ion_BiMaxwellianMoments_"
matching_files=$(ls $file_prefix*)

for file in $matching_files; do
  # # Extract the number between the prefix and suffix
  number=$(echo "$file" | sed "s|$file_prefix||; s|\.gkyl||")
  echo "Found file $file with number $number"
  # If the number is greater than the current max_number, update max_number and max_file
  if [ "$number" -gt "$max_number" ]; then
    echo "Updating max number to $number"
    max_number="$number"
  fi
done
echo "Max number is $max_number"

if [ "$max_number" -eq 0 ]; then
  echo "No matching files found. Starting from the begining"
  echo "./sim -g"
  srun -n $num_gpu ./sim -g -M -c $num_gpu

else
  echo "Resuming from file $max_number"
  echo "./sim -g -r $max_number"
  srun -n $num_gpu ./sim -g -M -c $num_gpu -r $max_number
fi

bash organize.sh