#!/bin/bash -l

#.Declare a name for this job, preferably with 16 or fewer characters.
#SBATCH -J gkyl-wham
#SBATCH -A m4414

#.Request the queue (enter the possible names, if omitted, default is the default)
#.this job is going to use the default
#SBATCH -q debug

#.Number of nodes to request (Perlmutter has 64 cores and 4 GPUs per node)
#SBATCH -N 7
#SBATCH --ntasks 28

#.Specify GPU needs:
#SBATCH --constraint gpu
#SBATCH --gpus 28

#.Request wall time
#SBATCH -t 0:05:00

#.Load modules (this must match those in the machines/configure script).
module load PrgEnv-gnu/8.5.0
module load craype-accel-nvidia80
module load cray-mpich/8.1.28
module load cudatoolkit/12.0
module load nccl/2.18.3-cu12

#.Disable CUDA-ware MPI, since it causes problems on Perlmutter and we use NCCL alone.
export MPICH_GPU_SUPPORT_ENABLED=0

#.On Perlmutter some jobs get warnings about DVS_MAXNODES (used in file stripping).
#.We set it to 24 for now, but really this depends on the amount/size of I/O being performed.
#.See online NERSC docs and the intro_mpi man page.
export DVS_MAXNODES=24_
export MPICH_MPIIO_DVS_MAXNODES=24

#.Run the rt_gk_sheath_2x2v_p1 executable using 1 GPU along x (-c 1) and 8
#.GPUs along the field line (-d 8). See './rt_gk_sheath_2x2v_p1 -h' for
#.more details/options on decomposition. It also assumes the executable is
#.in the present directory. If it isn't, change `./` to point to the
#.directory containing the executable.

# num_procs=(1 4 8 12 16 20 24 28 32 36 40 44 48 52)
# num_procs=(1 2 3 4 6 8 12 16 24 48)
num_procs=(26)
Nz=104

start_time=$(date +%s)
echo "num_procs: ${num_procs[@]}"
# Initialize an array to store execution times
execution_times=()
output_file="temp_output.txt"
for procs in "${num_procs[@]}"
do
  num_nodes=$(echo " ($procs-1) / 4 + 1" | bc)
  echo "Starting job for $procs processors on $num_nodes nodes" 
  echo "Running simulation"

  # srun --nodes=$num_nodes --ntasks=$procs --gpus=$procs ./sim -g -s 100 -y $Nz -M -d $procs > "$output_file"
  srun -n $procs ./sim -g -s 100 -y $Nz -M -d $procs > "$output_file"
  cat "$output_file"
  elapsedTime=$(awk '/Total updates took/ {print $4}' "$output_file")
  eulerCalls=$(awk '/Number of forward-Euler calls/ {print $5}' "$output_file")
  timePerCall=$(echo "scale=4; $elapsedTime / $eulerCalls" | bc)
  echo "Elapsed Time: $elapsedTime seconds"
  echo "Euler Calls: $eulerCalls"
  echo "Time per call: $timePerCall seconds"
  execution_times+=($timePerCall)
  echo "Finished job for $procs processors"
done

# Print the final execution times
echo "Final results"
echo "Processors: ${num_procs[@]}"
echo "${num_procs[@]}" > num_procs.txt
echo "Execution times: ${execution_times[@]}"
echo "${execution_times[@]}" > execution_times.txt

mv *.gkyl outputs/

end_time=$(date +%s)
echo "Elapsed time: $((end_time-start_time)) seconds"
exit 0