#!/bin/bash -l
#.Declare a name for this job, preferably with 6 or fewer characters.
#SBATCH -J w1x-64np

#.Request the queue (enter the possible names, if omitted, default is the default)
#.this job is going to use the default
#SBATCH -q pppl-short

#.Number of nodes to request (Perlmutter has 64 cores and 4 GPUs per node)
#SBATCH -N 1
#SBATCH --ntasks-per-node 2
#SBATCH --mem=200000

#.Specify GPU needs:
#SBATCH --gres=gpu:2

#.Request wall time
#SBATCH -t 24:00:00

num_gpu=1

#.Load modules (this must match those in the machines/configure script).
export PATH="$HOME/scratch/gkylsoft-amd-gtwo/gkyl/bin:$PATH"
module load gcc/8
module load openmpi/cuda-11.1/gcc/4.1.1
module load cudatoolkit/12.4
module load anaconda3/2021.11

max_number=0
file_prefix="gk_wham_64_npos-ion_"
file_extension="[0-9]*.gkyl"
matching_files=$(ls $file_prefix$file_extension)
for file in $matching_files; do
  # # Extract the number between the prefix and suffix
  number=$(echo "$file" | sed "s|$file_prefix||; s|\.gkyl||")
  echo "Found file $file with number $number"
  # If the number is greater than the current max_number, update max_number and max_file
  if [ "$number" -gt "$max_number" ]; then
    echo "Updating max number to $number"
    max_number="$number"
  fi
done
echo "Max number is $max_number"

if [ "$max_number" -eq 0 ]; then
  echo "No matching files found. Starting from the begining"
  echo "srun -u -n $num_gpu ./sim_unif-64-np -g -M -c $num_gpu"
  srun -u -n $num_gpu ./sim_unif-64-np -g -M -c $num_gpu
else
  echo "Resuming from file $max_number"
  echo "srun -u -n $num_gpu ./sim_unif-64-np -g -M -c $num_gpu -r $max_number"
  srun -u -n $num_gpu ./sim_unif-64-np -g -M -c $num_gpu -r $max_number
fi